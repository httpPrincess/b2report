The core of the EUDAT data infrastructure is the B2Safe service which stores and replicates data objects. It also enables PID-based access to the stored items. This generic, low-level solution is a basis for further services e.g. B2Share. In EUDAT2 the data infrastructure should advance in sophistication to account for new use-cases going beyond the simple storage of files. The basic storage of data objects might not always be sufficient. Let us consider the management of metadata object. On one hand they are just like the data objects and we could and should store them in a safe manner. But they are much more useful when put in a relation to the actual data objects they describe. The reverse is true as well. The described objects become more meaningful when a relationship to the metadata exits. Unfortunately the current storage facility of EUDAT (B2Safe) does not support relationships between objects. In this JRA we propose to examine ways of extending the B2Safe service to create relations between stored objects. The objects stored in EUDAT are all registered with a PID service. Thus, in the simplest case, the relationships will connect two PID and describe the kind of relation between the objects e.g. ``metadata relationship''. Such a functionality alone will not solve all the challenges posed by the metadata management. But it has the potential to make the implementation of a metadata management easier and more powerful. Also other EUDAT services will benefit from this new functionality. For instance there is a merit of creating a link between a data object and a policy describing how the object should be managed. Last but not least links between object storing content might also be useful to express their interdependencies. In our effort we plan to take advantage of the research done in the field of linked data. EUDAT can either concentrate on providing different flavors of bit preservation services or it can extend its services to ``understand'' the content of the stored data. Presumably the later approach will allow to create more powerful services. The ``inter-linking'' functionality is an important building block for content-aware storage services. We plan to investigate the ways of implementing a (distributed) triple store. The store will manage tuples in form. The store should be an active one, allowing for extension. Typical way of extending the store would be to define actions that are triggered by creation of a relationship. For instance each time a metadata relation is created the metadata indexing service could be informed. There exist a  powerful mechanism for realizing this kind of functionality: webhooks. Thus in the second phase of our evaluation we plan to extend the tipple store with webhooks. The last step of the JRA work would be a test implementation of a real-world use case upon the provided mechanism. An automatic metadata indexing would be a good use case to test the new facility